{
  "_args": [
    [
      {
        "raw": "node-wit@4.3.0",
        "scope": null,
        "escapedName": "node-wit",
        "name": "node-wit",
        "rawSpec": "4.3.0",
        "spec": "4.3.0",
        "type": "version"
      },
      "/Users/antonhorl/Documents/projekte-lokal/servicio/prototypen/hotelMessenger/test-hotelmessenger-salzburgerhof"
    ]
  ],
  "_from": "node-wit@4.3.0",
  "_id": "node-wit@4.3.0",
  "_inCache": true,
  "_location": "/node-wit",
  "_nodeVersion": "8.2.1",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/node-wit-4.3.0.tgz_1501176540484_0.2911548875272274"
  },
  "_npmUser": {
    "name": "blandinw",
    "email": "willy@wit.ai"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "node-wit@4.3.0",
    "scope": null,
    "escapedName": "node-wit",
    "name": "node-wit",
    "rawSpec": "4.3.0",
    "spec": "4.3.0",
    "type": "version"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/node-wit/-/node-wit-4.3.0.tgz",
  "_shasum": "e068d3c44c706709d800d3acec228e998024abaa",
  "_shrinkwrap": null,
  "_spec": "node-wit@4.3.0",
  "_where": "/Users/antonhorl/Documents/projekte-lokal/servicio/prototypen/hotelMessenger/test-hotelmessenger-salzburgerhof",
  "author": {
    "name": "The Wit Team",
    "email": "help@wit.ai"
  },
  "bugs": {
    "url": "https://github.com/wit-ai/node-wit/issues"
  },
  "dependencies": {
    "isomorphic-fetch": "^2.2.1",
    "uuid": "^3.0.0"
  },
  "description": "Wit.ai Node.js SDK",
  "devDependencies": {
    "babel-cli": "^6.16.0",
    "babel-preset-es2015": "^6.16.0",
    "babel-preset-stage-0": "^6.16.0",
    "chai": "^3.5.0",
    "mocha": "^3.1.2",
    "sinon": "^1.17.6"
  },
  "directories": {},
  "dist": {
    "integrity": "sha512-ZHtVAbH1WXPe9CFavlwSMORaGEpxAwrmHVc1JIPEW0eZzdfHN0sn76yPgZrZhz1sAGC8FVWgFrYU6rZaf+AljQ==",
    "shasum": "e068d3c44c706709d800d3acec228e998024abaa",
    "tarball": "https://registry.npmjs.org/node-wit/-/node-wit-4.3.0.tgz"
  },
  "engines": {
    "node": ">=4.0.0"
  },
  "gitHead": "156edad45603cc41f123664f6770b0f0254e6105",
  "homepage": "https://github.com/wit-ai/node-wit#readme",
  "keywords": [
    "wit",
    "wit.ai",
    "bot",
    "botengine",
    "bots",
    "nlp",
    "automation"
  ],
  "main": "index.js",
  "maintainers": [
    {
      "name": "blandinw",
      "email": "willy@wit.ai"
    },
    {
      "name": "catacola",
      "email": "akesich@gmail.com"
    },
    {
      "name": "martinraison",
      "email": "martinraison@gmail.com"
    },
    {
      "name": "oliviervaussy",
      "email": "oliv@wit.ai"
    },
    {
      "name": "patapizza",
      "email": "julien@wit.ai"
    },
    {
      "name": "stopachka",
      "email": "stepan.p@gmail.com"
    }
  ],
  "name": "node-wit",
  "optionalDependencies": {},
  "readme": "# Wit Node.js SDK [![npm](https://img.shields.io/npm/v/node-wit.svg)](https://www.npmjs.com/package/node-wit)\n\n`node-wit` is the Node.js SDK for [Wit.ai](https://wit.ai).\n\n## Install\n\nIn your Node.js project, run:\n\n```bash\nnpm install --save node-wit\n```\n\n## Quickstart\n\nRun in your terminal:\n\n```bash\n# Node.js <= 6.x.x, add the flag --harmony_destructuring\nnode --harmony_destructuring examples/basic.js <MY_TOKEN>\n# Node.js >= v6.x.x\nnode examples/basic.js <MY_TOKEN>\n```\n\nSee `examples` folder for more examples.\n\n### Messenger integration example\n\nSee `examples/messenger.js` for a thoroughly documented tutorial.\n\n### Overview\n\nThe Wit module provides a Wit class with the following methods:\n* `message` - the Wit [message](https://wit.ai/docs/http/20160330#get-intent-via-text-link) API\n\nYou can also require a library function to test out your bot in the terminal. `require('node-wit').interactive`\n\n### Wit class\n\nThe Wit constructor takes the following parameters:\n* `accessToken` - the access token of your Wit instance\n* `logger` - (optional) the object handling the logging.\n* `apiVersion` - (optional) the API version to use instead of the recommended one\n\nThe `logger` object should implement the methods `debug`, `info`, `warn` and `error`.\nThey can receive an arbitrary number of parameters to log.\nFor convenience, we provide a `Logger` class, taking a log level parameter\n\nExample:\n```js\nconst {Wit, log} = require('node-wit');\n\nconst client = new Wit({\n  accessToken: MY_TOKEN,\n  logger: new log.Logger(log.DEBUG) // optional\n});\n\nconsole.log(client.message('set an alarm tomorrow at 7am'));\n```\n\n### .message()\n\nThe Wit [message](https://wit.ai/docs/http/20160330#get-intent-via-text-link) API.\n\nTakes the following parameters:\n* `message` - the text you want Wit.ai to extract the information from\n* `context` - (optional) the object representing the session state\n\nExample:\n```js\nconst client = new Wit({accessToken: 'MY_TOKEN'});\nclient.message('what is the weather in London?', {})\n.then((data) => {\n  console.log('Yay, got Wit.ai response: ' + JSON.stringify(data));\n})\n.catch(console.error);\n```\n\n### interactive\n\nStarts an interactive conversation with your bot.\n\nExample:\n```js\nconst {interactive} = require('node-wit');\ninteractive(client);\n```\n\nSee the [docs](https://wit.ai/docs) for more information.\n\n### .runActions()\n\n**DEPRECATED** See [our blog post](https://wit.ai/blog/2017/07/27/sunsetting-stories) for a migration plan.\n\nA higher-level method to the Wit converse API.\n`runActions` resets the last turn on new messages and errors.\n\nTakes the following parameters:\n* `sessionId` - a unique identifier describing the user session\n* `message` - the text received from the user\n* `context` - the object representing the session state\n* `maxSteps` - (optional) the maximum number of actions to execute (defaults to 5)\n\nExample:\n\n```js\nconst sessionId = 'my-user-session-42';\nconst context0 = {};\nclient.runActions(sessionId, 'what is the weather in London?', context0)\n.then((context1) => {\n  console.log('The session state is now: ' + JSON.stringify(context1));\n  return client.runActions(sessionId, 'and in Brussels?', context1);\n})\n.then((context2) => {\n  console.log('The session state is now: ' + JSON.stringify(context2));\n})\n.catch((e) => {\n  console.log('Oops! Got an error: ' + e);\n});\n```\n\nSee `./examples/messenger.js` for a full-fledged example\n\n### .converse()\n\n**DEPRECATED** See [our blog post](https://wit.ai/blog/2017/07/27/sunsetting-stories) for a migration plan.\n\nThe low-level Wit [converse](https://wit.ai/docs/http/20160330#converse-link) API.\n\nTakes the following parameters:\n* `sessionId` - a unique identifier describing the user session\n* `message` - the text received from the user\n* `context` - the object representing the session state\n* `reset` - (optional) whether to reset the last turn\n\nExample:\n```js\nclient.converse('my-user-session-42', 'what is the weather in London?', {})\n.then((data) => {\n  console.log('Yay, got Wit.ai response: ' + JSON.stringify(data));\n})\n.catch(console.error);\n```\n\n## Changing the API version\n\nOn 2016, May 11th, the /message API was updated to reflect the new Bot Engine model: intent are now entities.\nWe updated the SDK to the latest version: 20160516.\nYou can target a specific version by passing the `apiVersion` parameter when creating the `Wit` object.\n\n```json\n{\n  \"msg_id\" : \"e86468e5-b9e8-4645-95ce-b41a66fda88d\",\n  \"_text\" : \"hello\",\n  \"entities\" : {\n    \"intent\" : [ {\n      \"confidence\" : 0.9753469589149633,\n      \"value\" : \"greetings\"\n    } ]\n  }\n}\n```\n\nVersion prior to 20160511 will return the old format:\n\n```json\n{\n  \"msg_id\" : \"722fc79b-725c-4ca1-8029-b7f57ff88f54\",\n  \"_text\" : \"hello\",\n  \"outcomes\" : [ {\n    \"_text\" : \"hello\",\n    \"confidence\" : null,\n    \"intent\" : \"default_intent\",\n    \"entities\" : {\n      \"intent\" : [ {\n        \"confidence\" : 0.9753469589149633,\n        \"value\" : \"greetings\"\n      } ]\n    }\n  } ],\n  \"WARNING\" : \"DEPRECATED\"\n}\n```\n\n## Running tests\n\n1. Create a new app in wit.ai web console using tests/wit-ai-app-for-tests.zip\n2. Copy the Server Access Token from app settings\n3. Run `WIT_TOKEN=XXX npm test`, where XXX is the Server Access Token\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/wit-ai/node-wit.git"
  },
  "scripts": {
    "test": "mocha --timeout 10000 ./tests/lib.js"
  },
  "version": "4.3.0"
}
